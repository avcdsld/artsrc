/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GenArt721MinterInterface extends utils.Interface {
  functions: {
    "genArt721CoreAddress()": FunctionFragment;
    "getPriceInfo(uint256)": FunctionFragment;
    "minterFilterAddress()": FunctionFragment;
    "minterType()": FunctionFragment;
    "projectMaxHasBeenInvoked(uint256)": FunctionFragment;
    "projectMaxInvocations(uint256)": FunctionFragment;
    "purchase(uint256)": FunctionFragment;
    "purchaseTo(address,uint256)": FunctionFragment;
    "setProjectMaxInvocations(uint256)": FunctionFragment;
    "togglePurchaseToDisabled(uint256)": FunctionFragment;
    "updatePricePerTokenInWei(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "genArt721CoreAddress"
      | "getPriceInfo"
      | "minterFilterAddress"
      | "minterType"
      | "projectMaxHasBeenInvoked"
      | "projectMaxInvocations"
      | "purchase"
      | "purchaseTo"
      | "setProjectMaxInvocations"
      | "togglePurchaseToDisabled"
      | "updatePricePerTokenInWei"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "genArt721CoreAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minterFilterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectMaxHasBeenInvoked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "projectMaxInvocations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectMaxInvocations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePurchaseToDisabled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePricePerTokenInWei",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "genArt721CoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterFilterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minterType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectMaxHasBeenInvoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectMaxInvocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchaseTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProjectMaxInvocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePurchaseToDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePricePerTokenInWei",
    data: BytesLike
  ): Result;

  events: {
    "PricePerTokenInWeiUpdated(uint256,uint256)": EventFragment;
    "ProjectCurrencyInfoUpdated(uint256,address,string)": EventFragment;
    "PurchaseToDisabledUpdated(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PricePerTokenInWeiUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectCurrencyInfoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseToDisabledUpdated"): EventFragment;
}

export interface PricePerTokenInWeiUpdatedEventObject {
  _projectId: BigNumber;
  _pricePerTokenInWei: BigNumber;
}
export type PricePerTokenInWeiUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PricePerTokenInWeiUpdatedEventObject
>;

export type PricePerTokenInWeiUpdatedEventFilter =
  TypedEventFilter<PricePerTokenInWeiUpdatedEvent>;

export interface ProjectCurrencyInfoUpdatedEventObject {
  _projectId: BigNumber;
  _currencyAddress: string;
  _currencySymbol: string;
}
export type ProjectCurrencyInfoUpdatedEvent = TypedEvent<
  [BigNumber, string, string],
  ProjectCurrencyInfoUpdatedEventObject
>;

export type ProjectCurrencyInfoUpdatedEventFilter =
  TypedEventFilter<ProjectCurrencyInfoUpdatedEvent>;

export interface PurchaseToDisabledUpdatedEventObject {
  _projectId: BigNumber;
  _purchaseToDisabled: boolean;
}
export type PurchaseToDisabledUpdatedEvent = TypedEvent<
  [BigNumber, boolean],
  PurchaseToDisabledUpdatedEventObject
>;

export type PurchaseToDisabledUpdatedEventFilter =
  TypedEventFilter<PurchaseToDisabledUpdatedEvent>;

export interface GenArt721Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GenArt721MinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    genArt721CoreAddress(overrides?: CallOverrides): Promise<[string]>;

    getPriceInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, string] & {
        isConfigured: boolean;
        tokenPriceInWei: BigNumber;
        currencySymbol: string;
        currencyAddress: string;
      }
    >;

    minterFilterAddress(overrides?: CallOverrides): Promise<[string]>;

    minterType(overrides?: CallOverrides): Promise<[string]>;

    projectMaxHasBeenInvoked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    projectMaxInvocations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchase(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseTo(
      _to: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectMaxInvocations(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    togglePurchaseToDisabled(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    updatePricePerTokenInWei(
      _projectId: PromiseOrValue<BigNumberish>,
      _pricePerTokenInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  genArt721CoreAddress(overrides?: CallOverrides): Promise<string>;

  getPriceInfo(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, string] & {
      isConfigured: boolean;
      tokenPriceInWei: BigNumber;
      currencySymbol: string;
      currencyAddress: string;
    }
  >;

  minterFilterAddress(overrides?: CallOverrides): Promise<string>;

  minterType(overrides?: CallOverrides): Promise<string>;

  projectMaxHasBeenInvoked(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  projectMaxInvocations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchase(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseTo(
    _to: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectMaxInvocations(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  togglePurchaseToDisabled(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  updatePricePerTokenInWei(
    _projectId: PromiseOrValue<BigNumberish>,
    _pricePerTokenInWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    genArt721CoreAddress(overrides?: CallOverrides): Promise<string>;

    getPriceInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, string] & {
        isConfigured: boolean;
        tokenPriceInWei: BigNumber;
        currencySymbol: string;
        currencyAddress: string;
      }
    >;

    minterFilterAddress(overrides?: CallOverrides): Promise<string>;

    minterType(overrides?: CallOverrides): Promise<string>;

    projectMaxHasBeenInvoked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    projectMaxInvocations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseTo(
      _to: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProjectMaxInvocations(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    togglePurchaseToDisabled(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePricePerTokenInWei(
      _projectId: PromiseOrValue<BigNumberish>,
      _pricePerTokenInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PricePerTokenInWeiUpdated(uint256,uint256)"(
      _projectId?: PromiseOrValue<BigNumberish> | null,
      _pricePerTokenInWei?: PromiseOrValue<BigNumberish> | null
    ): PricePerTokenInWeiUpdatedEventFilter;
    PricePerTokenInWeiUpdated(
      _projectId?: PromiseOrValue<BigNumberish> | null,
      _pricePerTokenInWei?: PromiseOrValue<BigNumberish> | null
    ): PricePerTokenInWeiUpdatedEventFilter;

    "ProjectCurrencyInfoUpdated(uint256,address,string)"(
      _projectId?: PromiseOrValue<BigNumberish> | null,
      _currencyAddress?: PromiseOrValue<string> | null,
      _currencySymbol?: null
    ): ProjectCurrencyInfoUpdatedEventFilter;
    ProjectCurrencyInfoUpdated(
      _projectId?: PromiseOrValue<BigNumberish> | null,
      _currencyAddress?: PromiseOrValue<string> | null,
      _currencySymbol?: null
    ): ProjectCurrencyInfoUpdatedEventFilter;

    "PurchaseToDisabledUpdated(uint256,bool)"(
      _projectId?: PromiseOrValue<BigNumberish> | null,
      _purchaseToDisabled?: null
    ): PurchaseToDisabledUpdatedEventFilter;
    PurchaseToDisabledUpdated(
      _projectId?: PromiseOrValue<BigNumberish> | null,
      _purchaseToDisabled?: null
    ): PurchaseToDisabledUpdatedEventFilter;
  };

  estimateGas: {
    genArt721CoreAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minterFilterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    minterType(overrides?: CallOverrides): Promise<BigNumber>;

    projectMaxHasBeenInvoked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectMaxInvocations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseTo(
      _to: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectMaxInvocations(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    togglePurchaseToDisabled(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePricePerTokenInWei(
      _projectId: PromiseOrValue<BigNumberish>,
      _pricePerTokenInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    genArt721CoreAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceInfo(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterFilterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectMaxHasBeenInvoked(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectMaxInvocations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseTo(
      _to: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectMaxInvocations(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    togglePurchaseToDisabled(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePricePerTokenInWei(
      _projectId: PromiseOrValue<BigNumberish>,
      _pricePerTokenInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
